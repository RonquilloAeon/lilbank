/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package lilbank

import java.lang.NumberFormatException
import java.math.BigDecimal

import Account
import Bank
import lilbank.adapters.AccountRepository

fun getBank() : Bank {
    return Bank("Bank of the Universe")
}

fun getAccountIdFromUser(message: String = "Account id: ") : Any {
    print(message)
    return try { readLine()!!.toInt() } catch (e: NumberFormatException) { println("Invalid int") }
}

fun getAmountFromUser(message: String = "Amount: ") : Any {
    print(message)
    return try { readLine()!!.toBigDecimal() } catch (e: NumberFormatException) { println("Invalid currency") }
}

fun createAccount(bank: Bank, repository: AccountRepository) {
    println("Create new account for ${bank.name}")

    print("Name: ")
    val name = readLine()!!
    val account = Account(name=name)
    bank.addAccount(account)
    repository.save(account)

    println("Account ${account.name} with id ${account.id} created")
}

fun deposit(bank: Bank, repository: AccountRepository) {
    val accountId = getAccountIdFromUser()
    val amount = getAmountFromUser()

    if (accountId is Int && amount is BigDecimal) {
        val account = bank.accounts[accountId]

        if (account != null) {
            account.deposit(amount)
            repository.save(account)
            println("Deposited $amount! Balance is now ${account.balance}")
        }
    }
}

fun listAccounts(repository: AccountRepository) {
    repository.list().forEach {
        it.printInfo()
    }
}

fun transfer(bank: Bank, repository: AccountRepository) {
    val fromAccountId = getAccountIdFromUser(message = "From account id: ")
    val toAccountId = getAccountIdFromUser(message = "To account id: ")
    val amount = getAmountFromUser()

    if (fromAccountId is Int && toAccountId is Int && amount is BigDecimal) {
        val fromAccount = bank.accounts[fromAccountId]
        val toAccount = bank.accounts[toAccountId]

        if (fromAccount != null && toAccount != null) {
            // TODO balance checks
            fromAccount.withdraw(amount)
            toAccount.deposit(amount)
            repository.save(fromAccount)
            repository.save(toAccount)
            println("Transferred $amount!")
        }
    }
}

fun withdraw(bank: Bank, repository: AccountRepository) {
    val accountId = getAccountIdFromUser()
    val amount = getAmountFromUser()

    if (accountId is Int && amount is BigDecimal) {
        val account = bank.accounts[accountId]

        if (account != null) {
            account.withdraw(amount)
            repository.save(account)
            println("Withdrew $amount! Balance is now ${account.balance}")
        }
    }
}

fun main() {
    val bank = getBank()
    println("Welcome to da '${bank.name}'!")

    // Load accounts
    val accountRepo = AccountRepository()
    accountRepo.list().forEach {
        bank.addAccount(it)
    }

    while (true) {
        println("----")
        print("Options:\n1) Create new account\n2) List accounts\n3) Deposit\n4) Withdraw\n5) Transfer\n> ")

        when (try { readLine()!!.toInt() } catch (e: NumberFormatException) { println("Invalid int") }) {
            1 -> createAccount(bank, accountRepo)
            2 -> listAccounts(accountRepo)
            3 -> deposit(bank, accountRepo)
            4 -> withdraw(bank, accountRepo)
            5 -> transfer(bank, accountRepo)
        }
    }
}
